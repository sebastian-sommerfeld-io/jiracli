---
name: CI

on:
  push:
    branches-ignore:
      - dependabot/**
  pull_request:
    branches-ignore:
      - dependabot/**
  schedule:
    - cron: '0 2 * * 1' # https://crontab.guru

permissions:
  contents: read

jobs:
  lint-yaml:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run yamllint
        uses: ibiqlik/action-yamllint@v3

  lint-env-files:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run dotenvlinter in container
        run: docker run -i --rm --volume "$(pwd):/app" --workdir "/app" dotenvlinter/dotenv-linter:latest --exclude "*node_modules*" --recursive

  lint-folders:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run folderslint in container
        run: docker run -i --rm --volume "$(pwd):$(pwd)" --workdir "$(pwd)" sommerfeldio/folderslint:latest folderslint

  lint-filenames:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run ls-lint in container
        run: docker run -i --rm --volume "$(pwd):/data" --workdir "/data" lslintorg/ls-lint:1.11.0

  shellcheck:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Run ShellCheck
        uses: ludeeus/action-shellcheck@2.0.0
        with:
          ignore_paths: node_modules target

  lint-dockerfile:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: hadolint
        uses: hadolint/hadolint-action@v3.1.0
        with:
          dockerfile: src/main/Dockerfile

  test-and-scan-go-app:
    runs-on: ubuntu-latest
    needs: ['lint-yaml', 'lint-env-files', 'lint-folders', 'lint-filenames', 'shellcheck', 'lint-dockerfile']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Build and run
        run: |
          (
            cd src/main/go || exit
            ./jiracli.sh user view admin.admin
          )
        shell: bash
      - name: SonarCloud Scan
        uses: SonarSource/sonarcloud-github-action@v1.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information, if any
          SONAR_TOKEN: ${{ secrets.SONARCLOUD_TOKEN }}

  build-and-deploy-docker-image:
    runs-on: ubuntu-latest
    needs: ['test-and-scan-go-app']
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Build Docker image and run integration tests
        run: |
          (
            cd src/test/integration-tests || exit
            ./tests.sh start
            ./tests.sh logs
          )
        shell: bash
      - name: Login to DockerHub
        uses: docker/login-action@v2
        if: ${{ github.actor != 'dependabot[bot]' }}
        with:
          username: ${{ secrets.DOCKERHUB_USER }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}
      - name: Deploy image to DockerHub
        if: ${{ github.actor != 'dependabot[bot]' }}
        run: |
          (
            IMAGE_DEV="local/jiracli:dev"
            IMAGE_CI="sommerfeldio/jiracli:ci"

            docker image tag "$IMAGE_DEV" "$IMAGE_CI"
            docker push "$IMAGE_CI"
          )
        shell: bash
      - name: Stop containers and remove Docker images
        run: |
          (
            cd src/test/integration-tests || exit
            ./tests.sh stop
          )
        shell: bash
      - name: Verify deployment to DockerHub
        run: |
          IMAGE_CI="sommerfeldio/jiracli:ci"
          docker image rm "$IMAGE_CI"
          docker pull "$IMAGE_CI"
        shell: bash

  validate-docs:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Download AsciiDoc plugin for AsciiDoc checks
        run: |
          VERSION="0.38.10"
          curl -L -o asciidoctor-intellij-plugin.zip "https://github.com/asciidoctor/asciidoctor-intellij-plugin/releases/download/$VERSION/asciidoctor-intellij-plugin-$VERSION.zip"
          unzip asciidoctor-intellij-plugin.zip
        shell: bash
      - name: Download Grazie plugin for grammar checks
        # https://plugins.jetbrains.com/plugin/12175-grazie/versions
        run: |
          VERSION=""
          curl -L -o grazie.zip 'https://plugins.jetbrains.com/plugin/download?rel=true&updateId=288191'
          unzip grazie.zip
        shell: bash
      - name: Get one more commit so Qodana we can identify the changes
        run: git fetch --deepen=1
        shell: bash
      - name: Qodana for Docs
        uses: JetBrains/qodana-action@v2022.3.2
        with:
          # https://hub.docker.com/r/jetbrains/qodana-jvm-community/tags
          # this disables the Gradle plugin to avoid the Gradle initializiation and the dependency download
          # as that is not necessary for the Grazie and AsciiDoc plugins to check spelling and links.
          args: >
            --linter,jetbrains/qodana-jvm-community:2022.3,
            --property=idea.suppressed.plugins.id=com.intellij.gradle,
            -v,${{ github.workspace }}/grazie:/opt/idea/plugins/grazie,
            -v,${{ github.workspace }}/grazie-pro:/opt/idea/plugins/grazie-pro,
            -v,${{ github.workspace }}/asciidoctor-intellij-plugin:/opt/idea/plugins/asciidoctor-intellij-plugin

  on-failure:
    runs-on: ubuntu-latest
    needs: ['lint-yaml', 'lint-env-files', 'lint-folders', 'lint-filenames', 'shellcheck', 'lint-dockerfile', 'test-and-scan-go-app', 'build-and-deploy-docker-image', 'validate-docs']
    if: failure()
    steps:
      - name: Send Pipeline Status to Google Chat
        if: always()
        uses: Co-qn/google-chat-notification@releases/v1
        with:
          name: ${{ github.workflow }}
          url: ${{ secrets.GOOGLE_CHAT_WEBHOOK }}
          status: failure
